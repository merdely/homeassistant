#!/usr/bin/env python3

# https://github.com/pkkid/python-plexapi?tab=readme-ov-file#usage-examples

from lxml import etree, html
from plexapi.myplex import MyPlexAccount
from plexapi.server import PlexServer
import configparser
import os
import re
import requests
import socket
import sys
import time

sleeptime = 5
rcfile = '~/.plexapi_rc'
rokuname = {
  "bedroom": "Bedroom Roku",
  "office": "Office Roku TV",
  "living-room": "Living Room Roku TV",
  "god-damn": "God Damn Roku",
}

def get_command_line_args():
    if len(sys.argv) < 3:
        print(f'Usage: {sys.argv[0]} roku movie_or_show_title')
        print(f'          Rokus:    "bedroom", "office", "living-room", "god-damn"/"family-room"')
        print(f'          examples:')
        print(f'                    {sys.argv[0]} office Friends')
        print(f'                    {sys.argv[0]} bedroom "Die Hard"')
        quit()
    else:
        roku = sys.argv[1]
        if roku == "family-room":
            roku = "god-damn"
        if roku not in [ "bedroom", "office", "living-room", "god-damn" ]:
            print(f"Error: Invalid roku ({roku})")
            quit()
        title = sys.argv[2]
        return (roku, title)

def get_configuration():
    # Home Assistant Configuration
    secrets = os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))) + '/secrets.yaml'
    if os.path.exists(secrets):
        plex_url = plex_token = myplex_token = None
        with open(secrets, 'r') as file:
            for line in file.readlines():
                m = re.search(r"^play_plex_(url|token|mytoken): '?([^']+)'?$", line)
                if m and m.group(1) == 'url':
                    plex_url = m.group(2).strip()
                elif m and m.group(1) == 'token':
                    plex_token = m.group(2).strip()
                elif m and m.group(1) == 'mytoken':
                    myplex_token = m.group(2).strip()
        if not plex_url or not plex_token or not myplex_token:
            print("Could not find plex_url, plex_token, and/or myplex_token) in secrets.yaml")
            quit()
        else:
            return (plex_url, plex_token, myplex_token)
    else:
        global rcfile
        conf_file = configparser.ConfigParser()
        try:
            conf_file.read_file(open(os.path.expanduser(rcfile)))
        except FileNotFoundError as err:
            print(err)
            sys.exit()

        try:
            plex_url = conf_file.get('plexapi', 'url')
            plex_token = conf_file.get('plexapi', 'token')
            myplex_token = conf_file.get('plexapi', 'myplex_token')
            return (plex_url, plex_token, myplex_token)
        except configparser.NoSectionError as err:
            print(err)
            quit()
        except configparser.NoOptionError as err:
            print(err)
            quit()
        except configparser.MissingSectionHeaderError as err:
            print('Not a valid config file.')
            print('Example:')
            print('    [plexapi]')
            print('    url: http://localhost:32400')
            print('    token: MYTOKEN')
            print('    myplex_token: MYPLEX_TOKEN')
            quit()

def roku_get_plex_appid(roku):
    try:
        response = requests.get(f"http://{socket.gethostbyname(f'roku-{roku}.erdely.in')}:8060/query/apps")
    except:
        print("Error: Could not connect to the Roku {roku}")
        quit()

    xml = response.content
    root = etree.fromstring(xml)
    try:
        app = root.xpath("//app[contains(text(), 'Plex')]")
        return app[0].get("id")
    except:
        print(f"Error: Plex app not found on Roku {roku}")
        quit()

def roku_launch_plex(roku, app_id):
    global sleeptime
    try:
        requests.post(f"http://{socket.gethostbyname(f'roku-{roku}.erdely.in')}:8060/launch/{app_id}")
    except:
        print(f"Error: Could not launch Plex app on Roku {roku}")
        quit()

    active_app = 0
    while active_app != app_id:
        try:
            response = requests.get(f"http://{socket.gethostbyname(f'roku-{roku}.erdely.in')}:8060/query/active-app")
        except:
            print(f"Error: Could not connect to the Roku {roku}")
            quit()

        xml = response.content
        root = etree.fromstring(xml)
        try:
            app = root.xpath("//app[contains(text(), 'Plex')]")
            active_app = app[0].get("id")
        except:
            print(f"Error: Plex app not found on Roku {roku}")
            quit()

    time.sleep(sleeptime)

def connect_to_plex(plex_url, plex_token, myplex_token):
    try:
        plex = PlexServer(plex_url, plex_token)
    except:
        print(f"Error: Could not connect to plex server {plex_url}")
        quit()

    try:
        account = MyPlexAccount(token=myplex_token)
    except:
        print(f"Error: Could not connect to Plex Account")
        quit()
    return (plex, account)


def main():
    roku, title = get_command_line_args()
    plex_url, plex_token, myplex_token = get_configuration()
    appid = roku_get_plex_appid(roku)
    roku_launch_plex(roku, appid)
    plex, account = connect_to_plex(plex_url, plex_token, myplex_token)

    media = None
    library = "TV Shows"
    try:
        media = plex.library.section(library).get(title)
    except:
        pass

    if not media:
        library = "Movies"
        try:
            media = plex.library.section(library).get(title)
        except:
            pass

    if not media:
        print("Error: Could not determine library for {title}")
        quit()

    device = account.device(rokuname[roku])
    client = device.connect()
    if library == "TV Shows":
        client.playMedia(media.onDeck())
    else:
        client.playMedia(media)

if __name__ == '__main__':
    main()
