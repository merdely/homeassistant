- sensor:
    unique_id: unavailable_entities
    name: Unavailable Entities
    icon: mdi:cloud-question
    state: "{{ states | rejectattr('entity_id','match','^(number..*_plug_overload_protection|camera.octoprint.*|(binary_sensor|light|sensor|select|switch).(db_size|home_condition_(day|night)_.*|home_air_quality_.*|home_cloud_ceiling|home_hours_of_sun_.*|home_precipitation|home_pressure_tendency|home_realfeel_.*|home_thunderstorm_probability_.*|home_uv_index.*|home_wind.*|.*_plug_consumer_connected|.*_effect|.*_power_on_behavior|bedroom_tv_remote_status|garage_door_status|god_damn_tv_remote_status|office_tv_remote_status|unavailable_entities|[0-9a-f]{8}_[0-9a-f]{8}|(a9be1c3a971c8a94|kukui)_.*|ir_receiver_status|lumi_lumi_plug_maus[0-9]+|mike_desk_lamp_button|octoprint_.*|office_heater_plug.*|outdoor_(plug|strip).*|.*_roku_supports_find_remote|.*_roku_(tv_)?active_app(_id)?|.*_roku_headphones_connected|.*_roku_supports_airplay|.*_roku_supports_ethernet|speedtest_.*|withings_(?!in_bed).*)|update.frigate_server|group.outside_xmas|weather.home_2|device_tracker.pixel_.*|device_tracker.google_pixel_watch|camera.garage_door_cam|update..*_bulb|device_tracker.kukui(_[0-9]+)?)$') | rejectattr('domain','in',['tts', 'stt', 'update', 'button', 'number', 'remote', 'media_player']) | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | length }}"
    attributes:
      entity_list: "{{ states | rejectattr('entity_id','match','^(number..*_plug_overload_protection|camera.octoprint.*|(binary_sensor|light|sensor|select|switch).(db_size|home_condition_(day|night)_.*|home_air_quality_.*|home_cloud_ceiling|home_hours_of_sun_.*|home_precipitation|home_pressure_tendency|home_realfeel_.*|home_thunderstorm_probability_.*|home_uv_index.*|home_wind.*|.*_plug_consumer_connected|.*_effect|.*_power_on_behavior|bedroom_tv_remote_status|garage_door_status|god_damn_tv_remote_status|office_tv_remote_status|unavailable_entities|[0-9a-f]{8}_[0-9a-f]{8}|(a9be1c3a971c8a94|kukui)_.*|ir_receiver_status|lumi_lumi_plug_maus[0-9]+|mike_desk_lamp_button|octoprint_.*|office_heater_plug.*|outdoor_(plug|strip).*|.*_roku_supports_find_remote|.*_roku_(tv_)?active_app(_id)?|.*_roku_headphones_connected|.*_roku_supports_airplay|.*_roku_supports_ethernet|speedtest_.*|withings_(?!in_bed).*)|update.frigate_server|group.outside_xmas|weather.home_2|device_tracker.pixel_.*|device_tracker.google_pixel_watch|camera.garage_door_cam|update..*_bulb|device_tracker.kukui(_[0-9]+)?)$') | rejectattr('domain','in',['tts', 'stt', 'update', 'button', 'number', 'remote', 'media_player']) | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | join(', ') }}"
      ha_count: true

- sensor:
    unique_id: unavailable_entities_full_list
    name: Unavailable Entities Full List
    icon: mdi:cloud-question
    state: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | length }}"
    attributes:
      entity_list: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | join(', ') }}"
      ha_count: true

- binary_sensor:
    unique_id: spotify_broadcasting
    name: Spotify Broadcasting
    icon: mdi:spotify
    state: >-
      {% if ("speaker" in (state_attr('media_player.spotify_merdely', 'source') | lower)) == True %}
        On
      {% else %}
        Off
      {% endif %}

- binary_sensor:
    unique_id: christmas_tree_available
    name: Christmas Tree Available
    state: >-
      {% if states('switch.christmas_tree') == 'unknown' %}
        Off
      {% else %}
        On
      {% endif %}

- binary_sensor:
    unique_id: security_devices
    name: Security Devices
    device_class: opening
    state: "{{ states('group.security_devices') }}"

- binary_sensor:
    unique_id: sliders
    name: Sliders
    device_class: opening
    state: "{{ states('group.sliders') }}"

- binary_sensor:
    unique_id: int_doors_windows
    name: Doors/Windows
    device_class: opening
    state: "{{ states('group.int_doors_windows') }}"

- binary_sensor:
    unique_id: ext_door_gates
    name: Doors/Gates
    device_class: opening
    state: "{{ states('group.ext_door_gates') }}"

- binary_sensor:
    unique_id: doors_windows
    name: Interior Security Devices
    device_class: opening
    state: "{{ states('group.doors_windows') }}"

- binary_sensor:
    unique_id: exterior_security_devices
    name: Exterior Security Devices
    device_class: opening
    state: "{{ states('group.exterior_security_devices') }}"

- binary_sensor:
    unique_id: oven_is_on
    name: Oven is On
    state: "{{ states('sensor.oven_monitor_analog_ctenergy_power') | int(0) > 400 }}"
    delay_off:
        minutes: 3

- binary_sensor:
    unique_id: washer_running
    name: Laundry Room Washer
    state: "{{ states('input_boolean.laundry_room_washer_running') }}"

- binary_sensor:
    unique_id: dryer_running
    name: Laundry Room Dryer
    state: "{{ states('input_boolean.laundry_room_dryer_running') }}"

- binary_sensor:
    unique_id: software_update_available
    name: "Software Update Available"
    state: >-
      {% set ns = namespace(sensor = 'Off') -%}
      {% for software in states.sensor | selectattr('entity_id', 'match', '^sensor\..*_version_latest$') | map(attribute='entity_id') | list -%}
        {% if states(software|replace('_latest','')) != states(software) -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {% for software in states | selectattr('domain', 'equalto', 'update') | rejectattr('entity_id', 'match', '^update\.wap_') | map(attribute='entity_id') | list -%}
        {% if states(software) == "on" -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {% if states('sensor.hacs') | int(default=0) > 0 -%}
        {% set ns.sensor = 'On' -%}
      {% endif -%}
      {% if states('sensor.opnsense_versions') != state_attr('sensor.opnsense_package_versions', 'plugins')["opnsense"] -%}
        {% set ns.sensor = 'On' -%}
      {% endif -%}
      {% for plugin in state_attr('sensor.opnsense_versions', 'plugins') -%}
        {% if state_attr('sensor.opnsense_versions', 'plugins')[plugin] != state_attr('sensor.opnsense_package_versions', 'plugins')["os-"+plugin] -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {% for ap in state_attr('sensor.unifi_ap_versions', 'data') -%}
        {% if ap['version'] != ap['version_available'] -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {{ ns.sensor }}
    attributes:
      number: >-
        {% set ns = namespace(updates = 0) -%}
        {% for software in states.sensor | selectattr('entity_id', 'match', '^sensor\..*_version_latest$') | map(attribute='entity_id') | list -%}
          {% if states(software|replace('_latest','')) != states(software) -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {% for software in states | selectattr('domain', 'equalto', 'update') | rejectattr('entity_id', 'match', '^update\.wap_') | map(attribute='entity_id') | list -%}
          {% if states(software) == "on" -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {% if states('sensor.hacs') | int(default=0) > 0 -%}
          {% set ns.updates = ns.updates + 1 -%}
        {% endif %}
        {% if states('sensor.opnsense_versions') != state_attr('sensor.opnsense_package_versions', 'plugins')["opnsense"] -%}
          {% set ns.updates = ns.updates + 1 -%}
        {% endif -%}
        {% for plugin in state_attr('sensor.opnsense_versions', 'plugins') -%}
          {% if state_attr('sensor.opnsense_versions', 'plugins')[plugin] != state_attr('sensor.opnsense_package_versions', 'plugins')["os-"+plugin] -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {% for ap in state_attr('sensor.unifi_ap_versions', 'data') -%}
          {% if ap['version'] != ap['version_available'] -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.updates }}
      entity_list: >-
        {% set ns = namespace(list = "") -%}
        {% for software in states.sensor | selectattr('entity_id', 'match', '^sensor\..*_version_latest$') | map(attribute='entity_id') | list -%}
          {% if states(software|replace('_latest','')) != states(software) -%}
            {% set ns.list = ns.list + " " + software -%}
          {% endif -%}
        {% endfor -%}
        {% for software in states | selectattr('domain', 'equalto', 'update') | rejectattr('entity_id', 'match', '^update\.wap_') | map(attribute='entity_id') | list -%}
          {% if states(software) == "on" -%}
            {% set ns.list = ns.list + " " + software -%}
          {% endif -%}
        {% endfor -%}
        {% if states('sensor.hacs') | int(default=0) > 0 -%}
          {% set ns.list = ns.list + " Hacs" -%}
        {% endif %}
        {% if states('sensor.opnsense_versions') != state_attr('sensor.opnsense_package_versions', 'plugins')["opnsense"] -%}
          {% set ns.list = ns.list + " " + " OPNsense" -%}
        {% endif -%}
        {% for plugin in state_attr('sensor.opnsense_versions', 'plugins') -%}
          {% if state_attr('sensor.opnsense_versions', 'plugins')[plugin] != state_attr('sensor.opnsense_package_versions', 'plugins')["os-"+plugin] -%}
            {% set ns.list = ns.list + " " + " OPNsense Plugin " + plugin -%}
          {% endif -%}
        {% endfor -%}
        {% for ap in state_attr('sensor.unifi_ap_versions', 'data') -%}
          {% if ap['version'] != ap['version_available'] -%}
            {% set ns.list = ns.list + " " + ap['name'] -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.list | trim }}
      ha_count: true

- sensor:
    unique_id: quick_status
    name: Quick Status
    state: >-
      {% if states('sensor.plex_plex') | int(-1) >= 0 and states('sensor.plex_plex') |int(-1) <= 9 %}{{ states('sensor.plex_plex') }}
      {% elif states('sensor.plex_plex') | int(-1) == -1 %}X
      {% else %}*{% endif %}
      |
      {% if states('sensor.software_update_available') | int(-1) >= 0 and states('sensor.software_update_available') |int(-1) <= 9 %}{{ states('sensor.software_update_available') }}
      {% elif states('sensor.software_update_available') | int(-1) == -1 %}X
      {% else %}*{% endif %}
      |
      {% if states('sensor.unavailable_entities') | int(-1) >= 0 and states('sensor.unavailable_entities') |int(-1) <= 9 %}{{ states('sensor.unavailable_entities') }}
      {% elif states('sensor.unavailable_entities') | int(-1) == -1 %}X
      {% else %}*{% endif %}
      |
      {% if states('sensor.ood_zigbee_entities') | int(-1) >= 0 and states('sensor.ood_zigbee_entities') |int(-1) <= 9 %}{{ states('sensor.ood_zigbee_entities') }}
      {% elif states('sensor.ood_zigbee_entities') | int(-1) == -1 %}X
      {% else %}*{% endif %}
    attributes:
      Plex Watchers: "{{ states('sensor.plex_plex') }}"
      Software Updates: "{{ states('sensor.software_update_available') }}"
      Unavailable Entities: "{{ states('sensor.unavailable_entities') }}"
      Out of Date Zigbee: "{{ states('sensor.ood_zigbee_entities') }}"

- trigger:
    - platform: time_pattern
      seconds: 13
    - platform: time_pattern
      seconds: 28
    - platform: time_pattern
      seconds: 43
    - platform: time_pattern
      seconds: 58
    - platform: homeassistant
      event: start
  sensor:
    name: Wyze Entities
    unique_id: wyze_entities
    icon: mdi:leak
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: |
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^(binary_)?sensor\.wyzesense(_|$)') | map(attribute='entity_id') | list -%}
          {% if state_attr(entity, 'friendly_name') == None -%}
            {% set fname = entity -%}
          {% else -%}
            {% set fname = state_attr(entity, 'friendly_name') -%}
          {% endif -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity, "friendly_name": fname,
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(state_attr(entity, 'timestamp'), 0)) | int(0) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}
      ha_count: true

- sensor:
    name: Wyze Entity Count
    unique_id: wyze_entity_count
    state: >
      {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
        {{ state_attr('sensor.wyze_entities', 'entity_list') | default([]) | length }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      ha_count: true

- sensor:
    name: OOD Wyze Entities
    unique_id: ood_wyze_entities
    icon: mdi:leak
    state: |
      {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
        {% set ns = namespace(count=0) -%}
        {% for entity in state_attr('sensor.wyze_entities', 'entity_list') | default([]) -%}
          {% if entity['timediff'] | int(0) > states('input_number.ood_wyze_seconds') | int(0) -%}
            {% set ns.count = ns.count + 1 -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.count }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      ha_count: true
      entity_list: >
        {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.wyze_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_wyze_seconds') | int(0) -%}
              {{ entity['friendly_name'] }} ({{ entity['timediff'] }}),
            {% endif -%}
          {% endfor -%}
        {% else -%}
          {{ [] }}
        {% endif -%}

- trigger:
    - platform: time_pattern
      seconds: 14
    - platform: time_pattern
      seconds: 29
    - platform: time_pattern
      seconds: 44
    - platform: time_pattern
      seconds: 59
    - platform: homeassistant
      event: start
  sensor:
    name: Zigbee Entities
    unique_id: zigbee_entities
    icon: mdi:zigbee
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: |
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^(light|(binary_)?sensor)\..*_(bulb|button_click|contact|occupancy|multisensor_temperature|plug_power|usb_router_last_seen|water_leak_sensor_water_leak)$') | selectattr('attributes.linkquality', 'defined') | map(attribute='entity_id') | list -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity,
            "friendly_name": state_attr(entity, 'friendly_name'),
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(state_attr(entity, 'last_seen'), 0) | int(0)) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}
      ha_count: true

- sensor:
    name: Zigbee Entity Count
    unique_id: zigbee_entity_count
    state: >
      {% if state_attr('sensor.zigbee_entities', 'entity_list') -%}
        {{ state_attr('sensor.zigbee_entities', 'entity_list') | default([]) | length }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      ha_count: true

- sensor:
    name: OOD Zigbee Entities
    unique_id: ood_zigbee_entities
    icon: mdi:zigbee
    state: |
      {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
        {% set ns = namespace(count=0) -%}
        {% for entity in state_attr('sensor.zigbee_entities', 'entity_list') | default([]) -%}
          {% if entity['entity_id'][-5:] == "_bulb" -%}
            {% if entity['timediff'] | int(0) > 60 * 60 * 24 -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% else %}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.count }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      ha_count: true
      entity_list: >
        {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.zigbee_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['entity_id'][-5:] == "_bulb" -%}
              {% if entity['timediff'] | int(0) > 60 * 60 * 24 -%}
                {{ entity['friendly_name'] }} ({{ entity['timediff'] }}),
              {% endif -%}
            {% else %}
              {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_seconds') | int(0) -%}
                {{ entity['friendly_name'] }} ({{ entity['timediff'] }}),
              {% endif -%}
            {% endif -%}
          {% endfor -%}
        {% else -%}
          {{ [] }}
        {% endif -%}

#- sensor:
#    name: Mike Test Template Sensor
#    unique_id: mike_test_template_sensor
#    state: |
#      {% set ns = namespace(foo = ['abc', 'def', 'ghi', 'jkl']) %}
#      {{ ns.foo[0] }}
#    attributes:
#      attr1: |
#        {% set ns = namespace(foo = ['abc', 'def', 'ghi', 'jkl']) %}
#        {{ ns.foo[1] }}
#      attr2: |
#        {{ ns.foo[2] }}

#- trigger:
#    - platform: time_pattern
#      seconds: 13
#    - platform: homeassistant
#      event: start
#  sensor:
#    name: Out of Date Zigbee Sensors
#    unique_id: out_of_date_zigbee_sensors
#    icon: mdi:zigbee
#    state: |
#      {%- set ns = namespace(count = 0) %}
#      {%- for entity_id in states | selectattr('entity_id','match','.*_last_seen$') | map(attribute='entity_id') | list %}
#        {% if states(entity_id) != "unknown" %}
#          {%- set secs=as_timestamp(now(), 0) - as_timestamp(states(entity_id), 0)|float(0) %}
#          {%- if secs > 120 * 60 %}
#            {%- set ns.count = ns.count + 1 %}
#          {%- endif %}
#        {%- endif %}
#      {%- endfor %}
#      {{ ns.count }}
#    attributes:
#      sensor_list: |
#        {%- set ns = namespace(ood_entities = []) %}
#        {%- for entity_id in states | selectattr('entity_id','match','.*_last_seen$') | map(attribute='entity_id') | list %}
#          {% if states(entity_id) != "unknown" %}
#            {%- set secs=as_timestamp(now(), 0) - as_timestamp(states(entity_id), 0)|float(0) %}
#            {%- if secs > 120 * 60 %}
#              {%- set ns.ood_entities = ns.ood_entities + [(state_attr(entity_id, "friendly_name") | replace(" last seen", "")) + " (" + secs|round(0)|string + ")"] %}
#            {%- endif %}
#          {%- endif %}
#        {%- endfor %}
#        {{ ns.ood_entities | join("" + ", ") }}
#      ha_count: true

- sensor:
    unique_id: ha_count_alerts
    name: Alerts
    icon: mdi:pound
    state: "{{ states.alert | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_automations
    name: Automations
    icon: mdi:pound
    state: "{{ states.automation | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_binary_sensors
    name: Binary Sensors
    icon: mdi:pound
    state: "{{ states.binary_sensor | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_cameras
    name: Cameras
    icon: mdi:pound
    state: "{{ states.camera | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_entities
    name: Entities
    icon: mdi:pound
    state: "{{ states | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_booleans
    name: Input Booleans
    icon: mdi:pound
    state: "{{ states.input_boolean | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_datetimes
    name: Input DateTimes
    icon: mdi:pound
    state: "{{ states.input_datetime | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_numbers
    name: Input Numbers
    icon: mdi:pound
    state: "{{ states.input_number | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_selects
    name: Input Selects
    icon: mdi:pound
    state: "{{ states.input_select | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_texts
    name: Input Texts
    icon: mdi:pound
    state: "{{ states.input_text | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_lights
    name: Lights
    icon: mdi:pound
    state: "{{ states.light | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_scripts
    name: Scripts
    icon: mdi:pound
    state: "{{ states.script | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_sensors
    name: Sensors
    icon: mdi:pound
    state: "{{ states.sensor | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_switches
    name: Switches
    icon: mdi:pound
    state: "{{ states.switch | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: washer_dryer_state
    name: Washer and Dryer State
    icon: mdi:washing-machine
    state: >-
      {% if states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 and states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        both
      {% elif states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 %}
        dryer
      {% elif states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        washer
      {% else %}
        off
      {% endif %}

- sensor:
    unique_id: washer_dryer_state_pretty
    name: Washer and Dryer State Pretty
    icon: mdi:washing-machine
    state: >-
      {% if states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 and states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        Washer & Dryer
      {% elif states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 %}
        Dryer
      {% elif states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        Washer
      {% else %}
        Laundry Idle
      {% endif %}

- sensor:
    unique_id: fully_kiosk_screensaver
    name: "Fully Kiosk Browser Screensaver"
    state: >-
      {% if state_attr('sensor.fully_kiosk_browser', 'isInScreensaver') == True %}
        On
      {% else %}
        Off
      {% endif %}

- sensor:
    unique_id: fully_kiosk_screensaver_mbr
    name: "Fully Kiosk Browser MBR Screensaver"
    state: >-
      {% if state_attr('sensor.fully_kiosk_browser_mbr', 'isInScreensaver') == True %}
        On
      {% else %}
        Off
      {% endif %}

- sensor:
    unique_id: alarm_state
    name: "Alarm State"
    state: >-
      {% if is_state("alarm_control_panel.home_alarm", "disarmed") and is_state("binary_sensor.security_devices", "off") %}
      disarmed_secure
      {% elif is_state("alarm_control_panel.home_alarm", "disarmed") and is_state("binary_sensor.security_devices", "on") %}
      disarmed_insecure
      {% else %}
      armed
      {% endif %}

- sensor:
    unique_id: thermostat_setpoints
    name: "Thermostat Setpoints"
    state: >-
      {%- if not state_attr('climate.thermostat', 'target_temp_high') %}
      {{ state_attr('climate.thermostat', 'temperature') | int(0) }}
      {%- else %}
      {{ state_attr('climate.thermostat', 'target_temp_high') | int(0) }}/{{ state_attr('climate.thermostat', 'target_temp_low') | int(0) }}
      {% endif %}

- sensor:
    unique_id: outside_temperature_met_no
    name: "Outside Temperature met.no"
    unit_of_measurement: "°F"
    state: "{{ state_attr('weather.home', 'temperature') | float(0) | round(1) }}"

- sensor:
    unique_id: outside_temperature_accuweather
    name: "Outside Temperature Accuweather"
    unit_of_measurement: "°F"
    state: "{{ state_attr('weather.home_2', 'temperature') | float(0) | round(1) }}"

- sensor:
    unique_id: attic_temperature
    name: "Attic Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.attic_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.attic_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: bedroom_temperature
    name: "Bedroom Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.bedroom_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.bedroom_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: master_bath_temperature
    name: "Master Bath Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.master_bath_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.master_bath_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: master_bath_humidity
    name: "Master Bath Humidity"
    unit_of_measurement: "%"
    state: >-
      {% if states("sensor.master_bath_multisensor_humidity") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.master_bath_multisensor_humidity") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: office_temperature
    name: "Office Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.office_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.office_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: living_room_temperature
    name: "Living Room Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.living_room_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.living_room_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: god_damn_temperature
    name: "God Damn Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.god_damn_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.god_damn_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: garage_temperature
    name: "Garage Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.garage_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.garage_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: outside_temperature
    name: "Outside Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.outside_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.outside_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: time_formatted
    name: "Time Formatted"
    icon: mdi:clock
    state: >
      {{ (as_timestamp(states('sensor.date_time_iso'), 0) |
         timestamp_custom('%-I:%M%p', 'Unavailable') | lower())[:-1] }}

- sensor:
    unique_id: weekday
    name: Weekday
    icon: mdi:calendar-star
    state: >-
      {% if now().weekday() in (0,) %}
        Monday
      {% elif now().weekday() in (1,) %}
        Tuesday
      {% elif now().weekday() in (2,) %}
        Wednesday
      {% elif now().weekday() in (3,) %}
        Thursday
      {% elif now().weekday() in (4,) %}
        Friday
      {% elif now().weekday() in (5,) %}
        Saturday
      {% else %}
        Sunday
      {% endif %}

- sensor:
    unique_id: tomorrow
    name: Weekday Tomorrow
    icon: mdi:calendar-plus
    state: >-
      {% if now().weekday() + 1 in (7,) %}
        Monday
      {% elif now().weekday() + 1 in (1,) %}
        Tuesday
      {% elif now().weekday() + 1 in (2,) %}
        Wednesday
      {% elif now().weekday() + 1 in (3,) %}
        Thursday
      {% elif now().weekday() + 1 in (4,) %}
        Friday
      {% elif now().weekday() + 1 in (5,) %}
        Saturday
      {% else %}
        Sunday
      {% endif %}

- sensor:
    unique_id: recycle_weekday
    name: Recycle Weekday
    state: >-
      {% if states('sensor.moco_recycle_day') == 'Monday' %}
        0
      {% elif states('sensor.moco_recycle_day') == 'Tuesday' %}
        1
      {% elif states('sensor.moco_recycle_day') == 'Wednesday' %}
        2
      {% elif states('sensor.moco_recycle_day') == 'Thursday' %}
        3
      {% elif states('sensor.moco_recycle_day') == 'Friday' %}
        4
      {% elif states('sensor.moco_recycle_day') == 'Saturday' %}
        5
      {% else %}
        6
      {% endif %}

- sensor:
    unique_id: trash_weekday_1
    name: Trash Weekday 1 Number
    state: >-
      {% if states('input_select.trash_day_1') == 'Monday' %}
        0
      {% elif states('input_select.trash_day_1') == 'Tuesday' %}
        1
      {% elif states('input_select.trash_day_1') == 'Wednesday' %}
        2
      {% elif states('input_select.trash_day_1') == 'Thursday' %}
        3
      {% elif states('input_select.trash_day_1') == 'Friday' %}
        4
      {% elif states('input_select.trash_day_1') == 'Saturday' %}
        5
      {% else %}
        6
      {% endif %}

- sensor:
    unique_id: trash_weekday_2
    name: Trash Weekday 2 Number
    state: >-
      {% if states('input_select.trash_day_2') == 'Monday' %}
        0
      {% elif states('input_select.trash_day_2') == 'Tuesday' %}
        1
      {% elif states('input_select.trash_day_2') == 'Wednesday' %}
        2
      {% elif states('input_select.trash_day_2') == 'Thursday' %}
        3
      {% elif states('input_select.trash_day_2') == 'Friday' %}
        4
      {% elif states('input_select.trash_day_2') == 'Saturday' %}
        5
      {% else %}
        6
      {% endif %}

- sensor:
    unique_id: recycle
    name: Recycle
    icon: mdi:recycle
    state: >-
      {% if states('sensor.weekday') == states('sensor.moco_recycle_day') %}
        Today
      {% elif states('sensor.weekday_tomorrow') == states('sensor.moco_recycle_day') %}
        Tomorrow
      {% else %}
        {% set days = states('sensor.recycle_weekday_number') | int(0) - now().weekday() %}
        {% if days < 0 %}{% set days = 7 + days %}{% endif %}
        {{ days }} days
      {% endif %}

- sensor:
    unique_id: trash
    name: Trash
    icon: mdi:trash-can
    state: >-
      {% if states('sensor.weekday') == states('input_select.trash_day_1') or states('sensor.weekday') == states('input_select.trash_day_2') %}
        Today
      {% elif states('sensor.weekday_tomorrow') == states('input_select.trash_day_1') or states('sensor.weekday_tomorrow') == states('input_select.trash_day_2') %}
        Tomorrow
      {% else %}
        {% set days = states('sensor.trash_weekday_1_number') | int(0) - now().weekday() %}
        {% set days2 = states('sensor.trash_weekday_2_number') | int(0) - now().weekday() %}
        {% if days < 0 %}{% set days = 7 + days %}{% endif %}
        {% if days2 < 0 %}{% set days2 = 7 + days2 %}{% endif %}
        {% if days2 < days%}{% set days = days2 %}{% endif %}
        {{ days }} days
      {% endif %}

- sensor:
    unique_id: days_until_cleaners
    name: Days Until Cleaners
    state: >
      {% set clean_day = state_attr("input_select.cleaners_weekday", "options").index(states("input_select.cleaners_weekday")) | int -%}
      {% set week_day = (as_timestamp(now()) | timestamp_custom("%w")) | int -%}
      {% set is_week = ((as_timestamp(now()) | timestamp_custom("%U"))) | int % 2 == iif(is_state("input_boolean.cleaner_week_even", "off"), 1, 0) -%}
      {%- if is_week and clean_day == week_day -%}
      Today
      {%- elif is_week and clean_day - week_day == 1 -%}
      Tomorrow
      {%- elif is_week and clean_day > week_day -%}
      {{ clean_day - week_day }} days
      {%- elif is_week and clean_day < week_day -%}
      {{ 14 + clean_day - week_day }} days
      {%- else -%}
      {{ 7 + clean_day - week_day }} days
      {%- endif -%}

- sensor:
    unique_id: trash_or_recycle
    name: Trash or Recycle
    icon: >-
      {% if states('sensor.weekday') == states('sensor.moco_recycle_day') or states('sensor.weekday_tomorrow') == states('sensor.moco_recycle_day') %}
      mdi:recycle
      {% elif states('sensor.weekday') == states('input_select.trash_day_1') or states('sensor.weekday') == states('input_select.trash_day_2') or states('sensor.weekday_tomorrow') == states('input_select.trash_day_1') or states('sensor.weekday_tomorrow') == states('input_select.trash_day_2') %}
      mdi:trash-can
      {% else %}
      mdi:minus
      {% endif %}
    state: >-
      {% set recycle = '' %}
      {% set trash = '' %}
      {% if states('sensor.weekday') == states('input_select.trash_day_1') or states('sensor.weekday') == states('input_select.trash_day_2') %}
        {% set trash = 'Trash' %}
      {% elif states('sensor.weekday_tomorrow') == states('input_select.trash_day_1') or states('sensor.weekday_tomorrow') == states('input_select.trash_day_2') %}
        {% set trash = 'Trash' %}
      {% endif %}
      {% if states('sensor.weekday') == states('sensor.moco_recycle_day') %}
        {% set recycle = 'Recycle' %}
      {% elif states('sensor.weekday_tomorrow') == states('sensor.moco_recycle_day') %}
        {% set recycle = '*Recycle*' %}
      {% endif %}
      {{ trash }}
      {% if trash | length > 0 and recycle | length > 0 %}/{% endif %}
      {{ recycle }}

- sensor:
    unique_id: num_downstairs_lights_on
    name: Downstairs Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {%- set count = 0 -%}
      {%- if is_state('light.god_damn_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.three_headed_lamp', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.fireplace_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.mantle_lights', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.christmas_tree', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.den_overhead_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.laundry_room_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.powder_room_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {{ count }}

- sensor:
    unique_id: num_middle_level_lights_on
    name: Middle Level Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {%- set count = 0 -%}
      {%- if is_state('light.kitchen_table_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.kitchen_overhead_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.dining_room_overhead_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.dining_room_christmas_lights', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.near_black_lamp', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.far_black_lamp', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.white_lamp', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.foyer_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {{ count }}

- sensor:
    unique_id: num_upstairs_lights_on
    name: Upstairs Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {%- set count = 0 -%}
      {%- if is_state('light.hallway_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.dresser_lamp', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.bedroom_fan_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('fan.bedroom_fan', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.master_bath_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.master_bath_fan', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.hall_bath_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.hall_bath_fan', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.office_fan_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('fan.office_fan', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.mike_desk_lamp', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {{ count }}
    # {%- if is_state('light.guest_room_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}

- sensor:
    unique_id: num_outside_lights_on
    name: Outside Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {%- set count = 0 -%}
      {%- if is_state('light.front_porch_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.outside_garage_lights', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.outside_xmas', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.shed_lamp', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('switch.flood_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.back_porch_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {{ count }}

- sensor:
    unique_id: num_garage_lights_on
    name: Garage Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {%- set count = 0 -%}
      {%- if is_state('light.bench_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.middle_garage_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {%- if is_state('light.far_garage_light', 'on') -%} {%- set count = count + 1 -%} {%- endif -%}
      {{ count }}

- sensor:
    unique_id: num_outside_garage_lights_on
    name: Outside Plus Garage Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {{ states('sensor.outside_lights_on') | int(0) +
         states('sensor.garage_lights_on') | int(0) }}

- sensor:
    unique_id: low_battery
    name: Low Battery
    state: >-
      {% set ns=namespace(state="Off") %}
      {% for state in states.sensor -%}
        {% if state.entity_id.endswith('_battery') and state.entity_id != 'sensor.low_battery' and state.state | int(0) < 10 -%}
          {% set ns.state = "On" %}
        {% endif -%}
      {% endfor -%}
      {{ ns.state }}
    attributes:
      entity_list: >-
        {% set ns=namespace(list="") %}
        {% for state in states.sensor -%}
          {% if state.entity_id.endswith('_battery') and state.entity_id != 'sensor.low_battery' and state.state | int(0) < 10 -%}
            {% set ns.list = ns.list + state.name + ' (' + state.state + '%), ' -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.list[:-2] }}

#- sensor:
#    unique_id: fully_kiosk_browser_version
#    name: Fully Kiosk Browser Version
#    state: "{{ '%.2f'|format(float(state_attr('sensor.fully_kiosk_browser', 'version'))) }}"
#    attributes:
#      test: "{{ state_attr('sensor.fully_kiosk_browser', 'version') }}"
#      test2: "{{ '%.2f'|format(float(state_attr('sensor.fully_kiosk_browser', 'version'))) }}"

- sensor:
    unique_id: spotify_artist_title
    name: Spotify Artist Title
    state: '{{ state_attr("media_player.spotify_merdely", "media_artist") }} - {{ state_attr("media_player.spotify_merdely", "media_title") }}'

- sensor:
    unique_id: withings_weight_lbs_michael_e
    name: Withings Weight Lbs Michael E
    state: '{{ (states("sensor.withings_weight_kg_michael_e") | float(0) * 2.2046226218) | round(2) }}'
    unit_of_measurement: "lbs"
    icon: mdi:weight-pound

- sensor:
    unique_id: software_update_available
    name: "Software Update Available"
    state: "{{ state_attr('binary_sensor.software_update_available', 'number') }}"
    unit_of_measurement: "Updates"
    attributes:
      entity_list: "{{ state_attr('binary_sensor.software_update_available', 'entity_list') }}"

# WyzeSense 778e4038 Days Since Seen
- sensor:
    unique_id: mailbox_sensor_days_since_seen
    name: Mailbox Sensor Days Since Seen
    state: "{{ ((utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.wyzesense_778e4038', 'timestamp'), 0)) / 3600 / 24) | round(2) }}"
    unit_of_measurement: "Days"

# WyzeSense 778e716f Days Since Seen
- sensor:
    unique_id: office_shelf_motion_sensor_days_since_seen
    name: Office Shelf Motion Sensor Days Since Seen
    state: "{{ ((utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.wyzesense_778e716f', 'timestamp'), 0)) / 3600 / 24) | round(2) }}"
    unit_of_measurement: "Days"

# Time Diff Sensors - Zigbee
- sensor:
    name: Dining Room Water Leak timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.dining_room_water_leak_sensor_water_leak', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Dining Room Slider timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.dining_room_slider_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Dining Room Freezer Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.dining_room_freezer_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Dining Room Refrigerator Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.dining_room_refrigerator_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Kitchen Freezer Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.kitchen_freezer_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Kitchen Refrigerator Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.kitchen_refrigerator_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Kitchen Water Leak timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.kitchen_water_leak_sensor_water_leak', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Back Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.back_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Front Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.front_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Garage Entry Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.garage_entry_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Garage Door Sensor timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.garage_door_sensor_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Garage Temperature timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('sensor.garage_multisensor_temperature', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Outside Temperature timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('sensor.outside_multisensor_temperature', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Attic Temperature timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('sensor.attic_multisensor_temperature', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Living Room Motion Sensor timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.living_room_motion_sensor_occupancy', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Living Room Temperature timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('sensor.living_room_multisensor_temperature', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Living Room Slider timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.living_room_slider_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Living Room Water Leak timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.living_room_water_leak_sensor_water_leak', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Shed Button timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('sensor.shed_button_click', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Shed Gate timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.shed_gate_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Shed Door timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.shed_door_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Chimney Gate timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.chimney_gate_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: God Damn Slider timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.god_damn_slider_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: God Damn Temperature timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('sensor.god_damn_multisensor_temperature', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: God Damn Slider timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.god_damn_slider_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: God Damn Water Leak timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.god_damn_water_leak_sensor_water_leak', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Powder Room Window timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.powder_room_window_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Den Window timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.den_window_contact', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Washer Water Leak timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.washer_water_leak_sensor_water_leak', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Water Heater Water Leak timediff Zigbee
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.water_heater_water_leak_sensor_water_leak', 'last_seen'), 0) }}"
    unit_of_measurement: "Seconds"

# Time Diff Sensors - Wyze
- sensor:
    name: Mailbox Sensor timediff Wyze
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.wyzesense_778e4038', 'timestamp'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    name: Office Shelf Motion Sensor timediff Wyze
    state: "{{ utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.wyzesense_778e716f', 'timestamp'), 0) }}"
    unit_of_measurement: "Seconds"

- sensor:
    unique_id: holly_is_in_bed
    name: Holly Is In Bed
    icon: mdi:bed
    state: >
      {% if states("binary_sensor.holly_bed_sensor_contact") != "on" %}
      In Bed
      {% else %}
      Not In Bed
      {% endif %}

- sensor:
    unique_id: mike_is_in_bed
    name: Mike Is In Bed
    icon: mdi:bed
    state: >
      {% if states("binary_sensor.mike_bed_sensor_contact") != "on" %}
      In Bed
      {% else %}
      Not In Bed
      {% endif %}

