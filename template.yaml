- sensor:
    unique_id: unavailable_entities
    name: Unavailable Entities
    icon: mdi:cloud-question
    state: >-
      {{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | rejectattr('entity_id', 'match', '^(?:' +
           's?tts?\.(?:home_assistant_cloud|piper|faster_whisper)|' +
           '[\w.]{1,15}(?:[0-9a-f]{16}|kukui|octoprint)_[\w.]{1,25}|' +
           'media_player\.(?:plex|playstation)[\w]{1,40}|' +
           'button\.(?:un)?ignore_all_issues|' +
           '[\w.]{1,20}_roku(?:_tv)?_(?:active_app(?:_id)?|application|headphones_connected|supports_[a-z0-9_]{1,20})|' +
           'device_tracker\.pixel_watch_3|' +
           'button.homeassistant_re(?:load|start)|' +
           'conversation\.home_assistant' +
           ')$') | map(attribute='entity_id') | list | length }}
    attributes:
      entity_list: >-
        {{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | rejectattr('entity_id', 'match', '^(?:' +
             's?tts?\.(?:home_assistant_cloud|piper|faster_whisper)|' +
             '[\w.]{1,15}(?:[0-9a-f]{16}|kukui|octoprint)_[\w.]{1,25}|' +
             'media_player\.(?:plex|playstation)[\w]{1,40}|' +
             'button\.(?:un)?ignore_all_issues|' +
             '[\w.]{1,20}_roku(?:_tv)?_(?:active_app(?:_id)?|application|headphones_connected|supports_[a-z0-9_]{1,20})|' +
             'device_tracker\.pixel_watch_3|' +
             'button.homeassistant_re(?:load|start)|' +
             'conversation\.home_assistant' +
             ')$') | map(attribute='entity_id') | list }}
      ha_count: true

- sensor:
    unique_id: unavailable_entities_full_list
    name: Unavailable Entities Full List
    icon: mdi:cloud-question
    state: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | length }}"
    attributes:
      entity_list: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | join(', ') }}"
      ha_count: true

- binary_sensor:
    unique_id: spotify_broadcasting
    name: Spotify Broadcasting
    icon: mdi:spotify
    state: >-
      {% if ("speaker" in (state_attr('media_player.spotify_merdely', 'source') | lower)) == True %}
        On
      {% else %}
        Off
      {% endif %}

- binary_sensor:
    unique_id: christmas_tree_available
    name: Christmas Tree Available
    state: >-
      {% if states('switch.christmas_tree') == 'unknown' %}
        Off
      {% else %}
        On
      {% endif %}

- binary_sensor:
    unique_id: security_devices
    name: Security Devices
    device_class: lock
    state: "{{ states('group.security_devices') }}"

- binary_sensor:
    unique_id: fake_security_devices
    name: Fake Security Devices
    device_class: lock
    state: "{{ states('group.fake_security_devices') }}"

- binary_sensor:
    unique_id: sliders
    name: Sliders
    device_class: opening
    state: "{{ states('group.sliders') }}"

- binary_sensor:
    unique_id: int_doors_windows
    name: Doors/Windows
    device_class: opening
    state: "{{ states('group.int_doors_windows') }}"

- binary_sensor:
    unique_id: ext_door_gates
    name: Doors/Gates
    device_class: opening
    state: "{{ states('group.ext_door_gates') }}"

- binary_sensor:
    unique_id: doors_windows
    name: Interior Security Devices
    device_class: opening
    state: "{{ states('group.doors_windows') }}"

- binary_sensor:
    unique_id: exterior_security_devices
    name: Exterior Security Devices
    device_class: opening
    state: "{{ states('group.exterior_security_devices') }}"

- binary_sensor:
    unique_id: oven_is_on
    name: Oven is On
    state: "{{ states('sensor.oven_monitor_analog_ctenergy_power') | int(0) > 400 }}"
    delay_off:
        minutes: 3

- binary_sensor:
    unique_id: washer_running
    name: Laundry Room Washer
    state: "{{ states('input_boolean.laundry_room_washer_running') }}"

- binary_sensor:
    unique_id: dryer_running
    name: Laundry Room Dryer
    state: "{{ states('input_boolean.laundry_room_dryer_running') }}"

- binary_sensor:
    unique_id: software_update_available
    name: "Software Update Available"
    state: >-
      {% set ns = namespace(sensor = 'Off') -%}
      {% for software in states.sensor | selectattr('entity_id', 'match', '^sensor\.[\w.]{1,30}_version_latest$') | map(attribute='entity_id') | list -%}
        {% if states(software|replace('_latest','')) != states(software) -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {% for software in states | selectattr('domain', 'equalto', 'update') | rejectattr('entity_id', 'match', '^update\.wap_') | map(attribute='entity_id') | list -%}
        {% if states(software) == "on" -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {% if states('sensor.hacs') | int(default=0) > 0 -%}
        {% set ns.sensor = 'On' -%}
      {% endif -%}
      {% if "opnsense" in state_attr('sensor.opnsense_package_versions', 'plugins') -%}
        {% if states('sensor.opnsense_versions') != state_attr('sensor.opnsense_package_versions', 'plugins')["opnsense"] -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endif -%}
      {% for plugin in state_attr('sensor.opnsense_versions', 'plugins') -%}
        {% if state_attr('sensor.opnsense_versions', 'plugins')[plugin] != state_attr('sensor.opnsense_package_versions', 'plugins')["os-"+plugin] -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {% for ap in state_attr('sensor.unifi_ap_versions', 'data') -%}
        {% if ap['version'] != ap['version_available'] -%}
          {% set ns.sensor = 'On' -%}
        {% endif -%}
      {% endfor -%}
      {{ ns.sensor }}
    attributes:
      number: >-
        {% set ns = namespace(updates = 0) -%}
        {% for software in states.sensor | selectattr('entity_id', 'match', '^sensor\.[\w.]{1,30}_version_latest$') | map(attribute='entity_id') | list -%}
          {% if states(software|replace('_latest','')) != states(software) -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {% for software in states | selectattr('domain', 'equalto', 'update') | rejectattr('entity_id', 'match', '^update\.wap_') | map(attribute='entity_id') | list -%}
          {% if states(software) == "on" -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {% if states('sensor.hacs') | int(default=0) > 0 -%}
          {% set ns.updates = ns.updates + 1 -%}
        {% endif %}
        {% if states('sensor.opnsense_versions') != state_attr('sensor.opnsense_package_versions', 'plugins')["opnsense"] -%}
          {% set ns.updates = ns.updates + 1 -%}
        {% endif -%}
        {% for plugin in state_attr('sensor.opnsense_versions', 'plugins') -%}
          {% if state_attr('sensor.opnsense_versions', 'plugins')[plugin] != state_attr('sensor.opnsense_package_versions', 'plugins')["os-"+plugin] -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {% for ap in state_attr('sensor.unifi_ap_versions', 'data') -%}
          {% if ap['version'] != ap['version_available'] -%}
            {% set ns.updates = ns.updates + 1 -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.updates }}
      entity_list: >-
        {% set ns = namespace(list = "") -%}
        {% for software in states.sensor | selectattr('entity_id', 'match', '^sensor\.[\w.]{1,30}_version_latest$') | map(attribute='entity_id') | list -%}
          {% if states(software|replace('_latest','')) != states(software) -%}
            {% set ns.list = ns.list + " " + software -%}
          {% endif -%}
        {% endfor -%}
        {% for software in states | selectattr('domain', 'equalto', 'update') | rejectattr('entity_id', 'match', '^update\.wap_') | map(attribute='entity_id') | list -%}
          {% if states(software) == "on" -%}
            {% set ns.list = ns.list + " " + software -%}
          {% endif -%}
        {% endfor -%}
        {% if states('sensor.hacs') | int(default=0) > 0 -%}
          {% set ns.list = ns.list + " Hacs" -%}
        {% endif %}
        {% if states('sensor.opnsense_versions') != state_attr('sensor.opnsense_package_versions', 'plugins')["opnsense"] -%}
          {% set ns.list = ns.list + " " + " OPNsense" -%}
        {% endif -%}
        {% for plugin in state_attr('sensor.opnsense_versions', 'plugins') -%}
          {% if state_attr('sensor.opnsense_versions', 'plugins')[plugin] != state_attr('sensor.opnsense_package_versions', 'plugins')["os-"+plugin] -%}
            {% set ns.list = ns.list + " " + " OPNsense Plugin " + plugin -%}
          {% endif -%}
        {% endfor -%}
        {% for ap in state_attr('sensor.unifi_ap_versions', 'data') -%}
          {% if ap['version'] != ap['version_available'] -%}
            {% set ns.list = ns.list + " " + ap['name'] -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.list | trim }}
      ha_count: true

- trigger:
    - platform: time_pattern
      seconds: 13
    - platform: time_pattern
      seconds: 28
    - platform: time_pattern
      seconds: 43
    - platform: time_pattern
      seconds: 58
    - platform: homeassistant
      event: start
  sensor:
    name: Wyze Entities
    unique_id: wyze_entities
    icon: mdi:leak
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: |
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^(binary_)?sensor\.wyzesense(_|$)') | map(attribute='entity_id') | list -%}
          {% if state_attr(entity, 'friendly_name') == None -%}
            {% set fname = entity -%}
          {% else -%}
            {% set fname = state_attr(entity, 'friendly_name') -%}
          {% endif -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity, "friendly_name": fname,
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(state_attr(entity, 'timestamp'), 0)) | int(0) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}
      count: '{{ states | selectattr("entity_id", "match", "^(binary_)?sensor\.wyzesense(_|$)") | map(attribute="entity_id") | list | length }}'
      ha_count: true

- sensor:
    name: OOD Wyze Entities
    unique_id: ood_wyze_entities
    icon: mdi:leak
    state: |
      {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
        {% set ns = namespace(count=0) -%}
        {% for entity in state_attr('sensor.wyze_entities', 'entity_list') | default([]) -%}
          {% if entity['timediff'] | int(0) > states('input_number.ood_wyze_seconds') | int(0) -%}
            {% set ns.count = ns.count + 1 -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.count }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      ha_count: true
      entity_list: >
        {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.wyze_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_wyze_seconds') | int(0) -%}
              {{ entity['friendly_name'] }} ({{ entity['timediff'] }}),
            {% endif -%}
          {% endfor -%}
        {% else -%}
          {{ [] }}
        {% endif -%}

- trigger:
    - platform: time_pattern
      seconds: 14
    - platform: time_pattern
      seconds: 29
    - platform: time_pattern
      seconds: 44
    - platform: time_pattern
      seconds: 59
    - platform: homeassistant
      event: start
  sensor:
    name: Zigbee Entities
    unique_id: zigbee_entities
    icon: mdi:zigbee
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: >-
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^[\w.]{1,50}_linkquality$') | map(attribute='entity_id') | list -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity,
            "friendly_name": device_attr(device_id(entity), 'name'),
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(states(entity | replace('_linkquality', '_last_seen')), 0) | int(0)) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}
      count: >-
        {{ states | selectattr('entity_id', 'match', '^[\w.]{1,50}_linkquality$') | map(attribute='entity_id') | list | count }}
      ha_count: true

- sensor:
    name: OOD Zigbee Entities
    unique_id: ood_zigbee_entities
    icon: mdi:zigbee
    state: |
      {% if state_attr('sensor.zigbee_entities', 'entity_list') -%}
        {% set ns = namespace(count=0) -%}
        {% for entity in state_attr('sensor.zigbee_entities', 'entity_list') | default([]) -%}
          {% if entity['entity_id'][-17:] == "_bulb_linkquality" -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_bulb_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% else %}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.count }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      ha_count: true
      entity_list: >
        {% if state_attr('sensor.zigbee_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.zigbee_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['entity_id'][-17:] == "_bulb_linkquality" -%}
              {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_bulb_seconds') | int(0) -%}
                {{ entity['friendly_name'] }} ({{ entity['timediff'] }}),
              {% endif -%}
            {% else -%}
              {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_seconds') | int(0) -%}
                {{ entity['friendly_name'] }} ({{ entity['timediff'] }}),
              {% endif -%}
            {% endif -%}
          {% endfor -%}
        {% else -%}
          {{ [] }}
        {% endif -%}

- sensor:
    unique_id: ha_count_alerts
    name: Alerts
    icon: mdi:pound
    state: "{{ states.alert | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_automations
    name: Automations
    icon: mdi:pound
    state: "{{ states.automation | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_binary_sensors
    name: Binary Sensors
    icon: mdi:pound
    state: "{{ states.binary_sensor | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_cameras
    name: Cameras
    icon: mdi:pound
    state: "{{ states.camera | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_entities
    name: Entities
    icon: mdi:pound
    state: "{{ states | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_booleans
    name: Input Booleans
    icon: mdi:pound
    state: "{{ states.input_boolean | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_datetimes
    name: Input DateTimes
    icon: mdi:pound
    state: "{{ states.input_datetime | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_numbers
    name: Input Numbers
    icon: mdi:pound
    state: "{{ states.input_number | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_selects
    name: Input Selects
    icon: mdi:pound
    state: "{{ states.input_select | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_input_texts
    name: Input Texts
    icon: mdi:pound
    state: "{{ states.input_text | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_lights
    name: Lights
    icon: mdi:pound
    state: "{{ states.light | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_scripts
    name: Scripts
    icon: mdi:pound
    state: "{{ states.script | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_sensors
    name: Sensors
    icon: mdi:pound
    state: "{{ states.sensor | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_switches
    name: Switches
    icon: mdi:pound
    state: "{{ states.switch | list | count }}"
    attributes:
      ha_count: true

- sensor:
    unique_id: ha_count_devices
    name: Devices
    icon: mdi:pound
    state: >
      {% set ns = namespace(devices = []) -%}
      {% for entity in states | map(attribute='entity_id') | list -%}
      {% if device_id(entity) != None and device_attr(entity, 'name')+"-"+device_id(entity) not in ns.devices -%}
      {% set ns.devices = ns.devices + [device_attr(entity, 'name')+"-"+device_id(entity)] -%}
      {% endif -%}
      {% endfor -%}
      {{ ns.devices | sort | count }}
    attributes:
      ha_count: true

- sensor:
    unique_id: washer_dryer_state
    name: Washer and Dryer State
    icon: mdi:washing-machine
    state: >-
      {% if states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 and states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        both
      {% elif states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 %}
        dryer
      {% elif states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        washer
      {% else %}
        off
      {% endif %}

- sensor:
    unique_id: washer_dryer_state_pretty
    name: Washer and Dryer State Pretty
    icon: mdi:washing-machine
    state: >-
      {% if states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 and states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        Washer & Dryer
      {% elif states('sensor.dryer_monitor_analog_ctenergy_power') | int(0) > 750 %}
        Dryer
      {% elif states('sensor.laundry_room_outlet_energy_power') | int(0) >= 3 %}
        Washer
      {% else %}
        Laundry Idle
      {% endif %}

- sensor:
    unique_id: fully_kiosk_screensaver
    name: "Fully Kiosk Browser Screensaver"
    state: >-
      {% if state_attr('sensor.fully_kiosk_browser', 'isInScreensaver') == True %}
        On
      {% else %}
        Off
      {% endif %}

- sensor:
    unique_id: fully_kiosk_screensaver_mbr
    name: "Fully Kiosk Browser MBR Screensaver"
    state: >-
      {% if state_attr('sensor.fully_kiosk_browser_mbr', 'isInScreensaver') == True %}
        On
      {% else %}
        Off
      {% endif %}

- sensor:
    unique_id: alarm_state
    name: "Alarm State"
    state: >-
      {% if is_state("alarm_control_panel.home_alarm", "disarmed") and is_state("binary_sensor.security_devices", "off") %}
      disarmed_secure
      {% elif is_state("alarm_control_panel.home_alarm", "disarmed") and is_state("binary_sensor.security_devices", "on") %}
      disarmed_insecure
      {% else %}
      armed
      {% endif %}

- sensor:
    unique_id: thermostat_temperature
    name: "Thermostat Temperature"
    unit_of_measurement: "°F"
    icon: mdi:thermometer
    state: >-
      {{ state_attr('climate.thermostat', 'current_temperature') | int(0) }}

- sensor:
    unique_id: thermostat_setpoints
    name: "Thermostat Setpoints"
    state: >-
      {%- if not state_attr('climate.thermostat', 'target_temp_high') %}
      {{ state_attr('climate.thermostat', 'temperature') | int(0) }}
      {%- else %}
      {{ state_attr('climate.thermostat', 'target_temp_high') | int(0) }}/{{ state_attr('climate.thermostat', 'target_temp_low') | int(0) }}
      {% endif %}

- sensor:
    unique_id: outside_temperature_met_no
    name: "Outside Temperature met.no"
    unit_of_measurement: "°F"
    icon: mdi:thermometer
    state: "{{ state_attr('weather.home', 'temperature') | float(0) | round(1) }}"

- sensor:
    unique_id: outside_temperature_accuweather
    name: "Outside Temperature Accuweather"
    unit_of_measurement: "°F"
    state: "{{ state_attr('weather.home_2', 'temperature') | float(0) | round(1) }}"

- sensor:
    unique_id: attic_temperature
    name: "Attic Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.attic_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.attic_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: bedroom_temperature
    name: "Bedroom Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.bedroom_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.bedroom_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: master_bath_temperature
    name: "Master Bath Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.master_bath_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.master_bath_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: hall_bath_humidity
    name: "Hall Bath Humidity"
    unit_of_measurement: "%"
    icon: mdi:water-percent
    state: >-
      {% if states("sensor.hall_bath_multisensor_humidity") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.hall_bath_multisensor_humidity") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: master_bath_humidity
    name: "Master Bath Humidity"
    unit_of_measurement: "%"
    icon: mdi:water-percent
    state: >-
      {% if states("sensor.master_bath_multisensor_humidity") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.master_bath_multisensor_humidity") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: bedroom_humidity
    name: "Bedroom Humidity"
    unit_of_measurement: "%"
    icon: mdi:water-percent
    state: >-
      {% if states("sensor.bedroom_multisensor_humidity") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.bedroom_multisensor_humidity") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: office_temperature
    name: "Office Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.office_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.office_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: office_humidity
    name: "Office Humidity"
    unit_of_measurement: "%"
    icon: mdi:water-percent
    state: >-
      {% if states("sensor.office_multisensor_humidity") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.office_multisensor_humidity") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: living_room_temperature
    name: "Living Room Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.living_room_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.living_room_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: god_damn_temperature
    name: "God Damn Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.god_damn_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.god_damn_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: garage_temperature
    name: "Garage Temperature"
    unit_of_measurement: "°F"
    state: >-
      {% if states("sensor.garage_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.garage_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: outside_temperature
    name: "Outside Temperature"
    unit_of_measurement: "°F"
    icon: mdi:thermometer
    state: >-
      {% if states("sensor.outside_multisensor_temperature") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.outside_multisensor_temperature") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: outside_humidity
    name: "Outside Humidity"
    unit_of_measurement: "%"
    icon: mdi:water-percent
    state: >-
      {% if states("sensor.outside_multisensor_humidity") | float(-500.0) < -100.0 %}
        --
      {% else %}
        {{ states("sensor.outside_multisensor_humidity") | float(0) | round(1) }}
      {% endif %}

- sensor:
    unique_id: time_formatted
    name: "Time Formatted"
    icon: mdi:clock
    state: '{{ now().strftime("%-I:%M%p")[:-1] | lower() }}'

- sensor:
    unique_id: trash_weekday_1
    name: Trash Weekday 1 Number
    state: >-
      {% if states('input_select.trash_day_1') == 'Monday' %}
        0
      {% elif states('input_select.trash_day_1') == 'Tuesday' %}
        1
      {% elif states('input_select.trash_day_1') == 'Wednesday' %}
        2
      {% elif states('input_select.trash_day_1') == 'Thursday' %}
        3
      {% elif states('input_select.trash_day_1') == 'Friday' %}
        4
      {% elif states('input_select.trash_day_1') == 'Saturday' %}
        5
      {% else %}
        6
      {% endif %}

- sensor:
    unique_id: trash_weekday_2
    name: Trash Weekday 2 Number
    state: >-
      {% if states('input_select.trash_day_2') == 'Monday' %}
        0
      {% elif states('input_select.trash_day_2') == 'Tuesday' %}
        1
      {% elif states('input_select.trash_day_2') == 'Wednesday' %}
        2
      {% elif states('input_select.trash_day_2') == 'Thursday' %}
        3
      {% elif states('input_select.trash_day_2') == 'Friday' %}
        4
      {% elif states('input_select.trash_day_2') == 'Saturday' %}
        5
      {% else %}
        6
      {% endif %}

- sensor:
    unique_id: trash
    name: Trash
    icon: mdi:trash-can
    state: >-
      {% if now().strftime("%A") == states('input_select.trash_day_1') or now().strftime("%A") == states('input_select.trash_day_2') %}
        Today
      {% elif (now() + timedelta(days=1)).strftime("%A") == states('input_select.trash_day_1') or (now() + timedelta(days=1)).strftime("%A") == states('input_select.trash_day_2') %}
        Tomorrow
      {% else %}
        {% set days = states('sensor.trash_weekday_1_number') | int(0) - now().weekday() %}
        {% set days2 = states('sensor.trash_weekday_2_number') | int(0) - now().weekday() %}
        {% if days < 0 %}{% set days = 7 + days %}{% endif %}
        {% if days2 < 0 %}{% set days2 = 7 + days2 %}{% endif %}
        {% if days2 < days%}{% set days = days2 %}{% endif %}
        {{ days }} days
      {% endif %}

- sensor:
    unique_id: days_until_cleaners
    name: Days Until Cleaners
    state: >
      {% set clean_day = state_attr("input_select.cleaners_weekday", "options").index(states("input_select.cleaners_weekday")) | int -%}
      {% set week_day = (as_timestamp(now()) | timestamp_custom("%w")) | int -%}
      {% set is_week = ((as_timestamp(now()) | timestamp_custom("%U"))) | int % 2 == iif(is_state("input_boolean.cleaner_week_even", "off"), 1, 0) -%}
      {%- if is_week and clean_day == week_day -%}
      Today
      {%- elif is_week and clean_day - week_day == 1 -%}
      Tomorrow
      {%- elif is_week and clean_day > week_day -%}
      {{ clean_day - week_day }} days
      {%- elif is_week and clean_day < week_day -%}
      {{ 14 + clean_day - week_day }} days
      {%- else -%}
      {{ 7 + clean_day - week_day }} days
      {%- endif -%}

- sensor:
    unique_id: num_downstairs_lights_on
    name: Downstairs Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {% set lights = [
         states.light.god_damn_light,
         states.light.three_headed_lamp,
         states.light.fireplace_light,
         states.light.mantle_lights,
         states.switch.christmas_tree,
         states.light.den_overhead_light,
         states.light.laundry_room_light,
         states.light.powder_room_light,
      ] -%}
      {{ lights | selectattr('state','eq','on') | list | count }}

- sensor:
    unique_id: num_middle_level_lights_on
    name: Middle Level Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {% set lights = [
         states.light.kitchen_table_light,
         states.light.kitchen_overhead_light,
         states.light.dining_room_overhead_light,
         states.light.dining_room_christmas_lights,
         states.light.near_black_lamp,
         states.light.far_black_lamp,
         states.light.white_lamp,
         states.light.foyer_light,
      ] -%}
      {{ lights | selectattr('state','eq','on') | list | count }}

- sensor:
    unique_id: num_upstairs_lights_on
    name: Upstairs Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {% set lights = [
         states.light.guest_room_light,
         states.light.hallway_light,
         states.light.dresser_lamp,
         states.light.holly_nightstand_lamp,
         states.light.bedroom_fan_light,
         states.fan.bedroom_fan,
         states.light.master_bath_light,
         states.switch.master_bath_fan,
         states.light.hall_bath_light,
         states.switch.hall_bath_fan,
         states.light.office_fan_light,
         states.fan.office_fan,
         states.light.mike_desk_lamp,
      ] -%}
      {{ lights | selectattr('state','eq','on') | list | count }}

- sensor:
    unique_id: num_outside_lights_on
    name: Outside Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {% set lights = [
         states.light.front_porch_light, 
         states.light.outside_garage_lights, 
         states.switch.outside_xmas, 
         states.light.shed_lamp, 
         states.light.flood_light, 
         states.light.back_porch_light,
      ] -%}
      {{ lights | selectattr('state','eq','on') | list | count }}

- sensor:
    unique_id: num_garage_lights_on
    name: Garage Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {% set lights = [
         states.light.bench_light,
         states.light.far_garage_light,
      ] -%}
      {{ lights | selectattr('state','eq','on') | list | count }}

- sensor:
    unique_id: num_outside_garage_lights_on
    name: Outside Plus Garage Lights On
    icon: mdi:string-lights
    unit_of_measurement: Lights
    state: >-
      {{ states('sensor.outside_lights_on') | int(0) +
         states('sensor.garage_lights_on') | int(0) }}

- sensor:
    unique_id: low_battery
    name: Low Battery
    state: >-
      {% set ns=namespace(state="Off") %}
      {% for state in states.sensor -%}
        {% if state.entity_id.endswith('_battery') and state.entity_id != 'sensor.low_battery' and state.state | int(0) < 10 -%}
          {% set ns.state = "On" %}
        {% endif -%}
      {% endfor -%}
      {{ ns.state }}
    attributes:
      entity_list: >-
        {% set ns=namespace(list="") %}
        {% for state in states.sensor -%}
          {% if state.entity_id.endswith('_battery') and state.entity_id != 'sensor.low_battery' and state.state | int(0) < 10 -%}
            {% set ns.list = ns.list + state.name + ' (' + state.state + '%), ' -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.list[:-2] }}

- sensor:
    unique_id: opnsense_core_abi_version
    name: OpnSense Core ABI Version
    state: "{{ state_attr('sensor.opnsense_versions', 'core-abi') }}"

- sensor:
    unique_id: spotify_artist_title
    name: Spotify Artist Title
    state: '{{ state_attr("media_player.spotify_merdely", "media_artist") }} - {{ state_attr("media_player.spotify_merdely", "media_title") }}'

- sensor:
    unique_id: software_update_available
    name: "Software Update Available"
    state: "{{ state_attr('binary_sensor.software_update_available', 'number') }}"
    unit_of_measurement: "Updates"
    attributes:
      entity_list: "{{ state_attr('binary_sensor.software_update_available', 'entity_list') }}"

# WyzeSense 778e4038 Days Since Seen
- sensor:
    unique_id: mailbox_sensor_days_since_seen
    name: Mailbox Sensor Days Since Seen
    state: "{{ ((utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.mailbox_sensor', 'timestamp'), 0)) / 3600 / 24) | round(2) }}"
    unit_of_measurement: "Days"

- binary_sensor:
    unique_id: mailbox_sensor
    name: Mailbox Sensor
    state: '{{ states("binary_sensor.wyzesense_77ca81b4") }}'
    device_class: opening
    attributes:
      device_class: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "device_class") }}'
      timestamp: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "timestamp") }}'
      rssi: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "rssi") }}'
      battery_level: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "battery_level") }}'
      parent_entity: "binary_sensor.wyzesense_77ca81b4"

# WyzeSense 778e716f Days Since Seen
- sensor:
    unique_id: office_shelf_motion_sensor_days_since_seen
    name: Office Shelf Motion Sensor Days Since Seen
    state: "{{ ((utcnow().strftime('%s') | int(0) - as_timestamp(state_attr('binary_sensor.wyzesense_778e716f', 'timestamp'), 0)) / 3600 / 24) | round(2) }}"
    unit_of_measurement: "Days"

- sensor:
    unique_id: holly_is_in_bed
    name: Holly Is In Bed
    icon: mdi:bed
    state: >
      {% if states("binary_sensor.bed_sensor_holly") == "on" %}
      In Bed
      {% elif states("binary_sensor.bed_sensor_holly") == "off" %}
      Not In Bed
      {% else %}
      Unknown
      {% endif %}

- sensor:
    unique_id: holly_location
    name: Holly Location
    icon: mdi:face-woman
    state: >
      {% if states('person.holly_erdely') == "home" and states("binary_sensor.bed_sensor_holly") == "on" %}
      In Bed
      {% else %}
      {{ states('person.holly_erdely') | replace ('not_home', 'away') | replace('_', ' ') | title }}
      {% endif %}

- sensor:
    unique_id: mike_is_in_bed
    name: Mike Is In Bed
    icon: mdi:bed
    state: >
      {% if states("binary_sensor.bed_sensor_mike") == "on" %}
      In Bed
      {% elif states("binary_sensor.bed_sensor_mike") == "off" %}
      Not In Bed
      {% else %}
      Unknown
      {% endif %}

- sensor:
    unique_id: mike_location
    name: Mike Location
    icon: mdi:face-man
    state: >
      {% if states('person.michael_erdely') == "home" and states("binary_sensor.bed_sensor_mike") == "on" %}
      In Bed
      {% else %}
      {{ states('person.michael_erdely') | replace ('not_home', 'away') | replace('_', ' ') | title }}
      {% endif %}

- sensor:
    unique_id: tasmota_devices
    name: Tasmota Devices
    icon: mdi:devices
    state: >
      {% set ns = namespace(count = 0) -%}
      {% for i in integration_entities('tasmota') | sort -%}
      {% if i.endswith("_ip") -%}
      {% set ns.count = ns.count + 1 -%}
      {% endif -%}
      {% endfor -%}
      {{ ns.count }}
    attributes:
      devices: >
        {% set ns = namespace(div = "", output = "") -%}
        {% for i in integration_entities('tasmota') | sort -%}
        {% if i.endswith("_ip") -%}
        {% set ns.output = ns.output + ns.div + device_attr(device_id(i), 'name') + "," + states(i) -%}
        {% set ns.div = "|" -%}
        {% endif -%}
        {% endfor -%}
        {{ ns.output }}
      ha_count: true

- sensor:
    unique_id: jellyfin_watching
    name: Jellyfin Watching
    icon: mdi:television-play
    state: '{{ states("sensor.jellyfin_active_clients") | int(default=0) }}'
    unit_of_measurement: "watching"

- sensor:
    unique_id: plex_and_jellyfin_watching
    name: Plex and Jellyfin Watching
    icon: mdi:television-play
    state: '{{ states("sensor.plex_plex") | int(default=0) + states("sensor.jellyfin_active_clients") | int(default=0) }}'
    unit_of_measurement: "watching"

