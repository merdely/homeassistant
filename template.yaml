- sensor:
    unique_id: unavailable_entities
    name: Unavailable Entities
    icon: mdi:cloud-question
    state: >-
      {{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | rejectattr('entity_id', 'match', '^(?:' +
           's?tts?\.(?:home_assistant_cloud|piper|faster_whisper)|' +
           '[\w.]{1,15}(?:[0-9a-f]{16}|kukui|octoprint)_[\w.]{1,25}|' +
           '(remote|media_player)\.(?:plex|plex_[\w]{0,15}_plex_for_android_|playstation|firefox|chrom)[\w]{0,40}|' +
           'media_player\.(?:[a-z_]{1,30}_speaker|pixel_[\w]{1,20})|' +
           'button\.(?:un)?ignore_all_issues|' +
           '[\w.]{1,20}_roku(?:_tv)?_(?:active_app(?:_id)?|application|headphones_connected|supports_[a-z0-9_]{1,20})|' +
           'device_tracker\.pixel_watch_3|' +
           'button.homeassistant_re(?:load|start)|' +
           'conversation\.home_assistant' +
           ')$') | map(attribute='entity_id') | list | length }}
    attributes:
      entity_list: >-
        {{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | rejectattr('entity_id', 'match', '^(?:' +
             's?tts?\.(?:home_assistant_cloud|piper|faster_whisper)|' +
             '[\w.]{1,15}(?:[0-9a-f]{16}|kukui|octoprint)_[\w.]{1,25}|' +
             '(remote|media_player)\.(?:plex|plex_[\w]{0,15}_plex_for_android_|playstation|firefox|chrom)[\w]{0,40}|' +
             'media_player\.(?:[a-z_]{1,30}_speaker|pixel_[\w]{1,20})|' +
             'button\.(?:un)?ignore_all_issues|' +
             '[\w.]{1,20}_roku(?:_tv)?_(?:active_app(?:_id)?|application|headphones_connected|supports_[a-z0-9_]{1,20})|' +
             'device_tracker\.pixel_watch_3|' +
             'button.homeassistant_re(?:load|start)|' +
             'conversation\.home_assistant' +
             ')$') | map(attribute='entity_id') | list | join(', ') }}

- sensor:
    unique_id: unavailable_entities_full_list
    name: Unavailable Entities Full List
    icon: mdi:cloud-question
    state: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | length }}"
    attributes:
      entity_list: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list | join(', ') }}"

- binary_sensor:
    unique_id: oven_is_on
    name: Oven is On
    state: "{{ states('sensor.oven_monitor_analog_ctenergy_power') | int(0) > 400 }}"
    delay_off:
        minutes: 3

- trigger:
    - platform: time_pattern
      seconds: 13
    - platform: time_pattern
      seconds: 28
    - platform: time_pattern
      seconds: 43
    - platform: time_pattern
      seconds: 58
    - platform: homeassistant
      event: start
  sensor:
    name: Wyze Entities
    unique_id: wyze_entities
    icon: mdi:leak
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: |
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^(binary_)?sensor\.wyzesense(_|$)') | map(attribute='entity_id') | list -%}
          {% if state_attr(entity, 'friendly_name') == None -%}
            {% set fname = entity -%}
          {% else -%}
            {% set fname = state_attr(entity, 'friendly_name') -%}
          {% endif -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity, "friendly_name": fname,
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(state_attr(entity, 'timestamp'), 0)) | int(0) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}
      count: '{{ states | selectattr("entity_id", "match", "^(binary_)?sensor\.wyzesense(_|$)") | map(attribute="entity_id") | list | length }}'

- sensor:
    name: OOD Wyze Entities
    unique_id: ood_wyze_entities
    icon: mdi:leak
    state: |
      {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
        {% set ns = namespace(count=0) -%}
        {% for entity in state_attr('sensor.wyze_entities', 'entity_list') | default([]) -%}
          {% if entity['timediff'] | int(0) > states('input_number.ood_wyze_seconds') | int(0) -%}
            {% set ns.count = ns.count + 1 -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.count }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      entity_list: >-
        {% set ns = namespace(list = "") -%}
        {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.wyze_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_wyze_seconds') | int(0) -%}
              {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
            {% endif -%}
          {% endfor -%}
        {% else -%}
          {% set ns.list = "" %}
        {% endif -%}
        {{ ns.list | regex_replace(", $", "") }}

- trigger:
    - platform: time_pattern
      seconds: 14
    - platform: time_pattern
      seconds: 29
    - platform: time_pattern
      seconds: 44
    - platform: time_pattern
      seconds: 59
    - platform: homeassistant
      event: start
  sensor:
    name: Zigbee Entities
    unique_id: zigbee_entities
    icon: mdi:zigbee
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: >-
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^[\w.]{1,50}_linkquality$') | map(attribute='entity_id') | list -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity,
            "friendly_name": device_attr(device_id(entity), 'name'),
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(states(entity | replace('_linkquality', '_last_seen')), 0) | int(0)) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}
      count: >-
        {{ states | selectattr('entity_id', 'match', '^[\w.]{1,50}_linkquality$') | map(attribute='entity_id') | list | count }}

- sensor:
    name: OOD Zigbee Entities
    unique_id: ood_zigbee_entities
    icon: mdi:zigbee
    state: |
      {% if state_attr('sensor.zigbee_entities', 'entity_list') -%}
        {% set ns = namespace(count=0) -%}
        {% for entity in state_attr('sensor.zigbee_entities', 'entity_list') | default([]) -%}
          {% if entity['entity_id'][-17:] == "_bulb_linkquality" -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_bulb_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% elif entity['entity_id'][-19:] == "_button_linkquality" -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_button_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% else %}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.count }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      entity_list: >
        {% set ns = namespace(list = "") -%}
        {% if state_attr('sensor.zigbee_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.zigbee_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['entity_id'][-17:] == "_bulb_linkquality" -%}
              {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_bulb_seconds') | int(0) -%}
                {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
              {% endif -%}
            {% else -%}
              {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_seconds') | int(0) -%}
                {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
              {% endif -%}
            {% endif -%}
          {% endfor -%}
        {% else -%}
           {% set ns.list = "" %}
        {% endif -%}
        {{ ns.list | regex_replace(", $", "") }}

- trigger:
    - platform: time_pattern
      seconds: 12
    - platform: time_pattern
      seconds: 27
    - platform: time_pattern
      seconds: 42
    - platform: time_pattern
      seconds: 57
    - platform: homeassistant
      event: start
  sensor:
    name: Zwave Entities
    unique_id: zwave_entities
    icon: mdi:zwave
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: >-
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^[\w.]{1,50}_last_seen_zwave$') | map(attribute='entity_id') | list -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity,
            "friendly_name": device_attr(device_id(entity), 'name'),
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(states(entity), 0) | int(0)) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}
      count: >-
        {{ states | selectattr('entity_id', 'match', '^[\w.]{1,50}_last_seen_zwave$') | map(attribute='entity_id') | list | count }}

- sensor:
    name: OOD Zwave Entities
    unique_id: ood_zwave_entities
    icon: mdi:zwave
    state: |
      {% if state_attr('sensor.zwave_entities', 'entity_list') -%}
        {% set ns = namespace(count=0) -%}
        {% for entity in state_attr('sensor.zwave_entities', 'entity_list') | default([]) -%}
          {% if entity['entity_id'][-17:] == "_bulb_linkquality" -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zwave_bulb_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% else %}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zwave_seconds') | int(0) -%}
              {% set ns.count = ns.count + 1 -%}
            {% endif -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.count }}
      {% else -%}
        0
      {% endif -%}
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      entity_list: >
        {% set ns = namespace(list = "") -%}
        {% if state_attr('sensor.zwave_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.zwave_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zwave_seconds') | int(0) -%}
              {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
            {% endif -%}
          {% endfor -%}
        {% else -%}
           {% set ns.list = "" %}
        {% endif -%}
        {{ ns.list | regex_replace(", $", "") }}

- sensor:
    unique_id: low_battery
    name: Low Battery
    state: >-
      {% set ns=namespace(state="Off") %}
      {% for state in states.sensor -%}
        {% if state.entity_id.endswith('_battery') and state.entity_id != 'sensor.low_battery' and state.state | int(0) < 10 -%}
          {% set ns.state = "On" %}
        {% endif -%}
      {% endfor -%}
      {{ ns.state }}
    attributes:
      entity_list: >-
        {% set ns=namespace(list="") %}
        {% for state in states.sensor -%}
          {% if state.entity_id.endswith('_battery') and state.entity_id != 'sensor.low_battery' and state.state | int(0) < 10 -%}
            {% set ns.list = ns.list + state.name + ' (' + state.state + '%), ' -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.list | regex_replace(", $", "") }}

- binary_sensor:
    unique_id: mailbox_sensor
    name: Mailbox Sensor
    state: '{{ states("binary_sensor.wyzesense_77ca81b4") }}'
    device_class: opening
    attributes:
      device_class: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "device_class") }}'
      timestamp: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "timestamp") }}'
      rssi: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "rssi") }}'
      battery_level: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "battery_level") }}'
      parent_entity: "binary_sensor.wyzesense_77ca81b4"

- sensor:
    unique_id: tasmota_devices
    name: Tasmota Devices
    icon: mdi:devices
    state: >
      {% set ns = namespace(count = 0) -%}
      {% for i in integration_entities('tasmota') | sort -%}
      {% if i.endswith("_ip") -%}
      {% set ns.count = ns.count + 1 -%}
      {% endif -%}
      {% endfor -%}
      {{ ns.count }}
    attributes:
      devices: >
        {% set ns = namespace(div = "", output = "") -%}
        {% for i in integration_entities('tasmota') | sort -%}
        {% if i.endswith("_ip") -%}
        {% set ns.output = ns.output + ns.div + device_attr(device_id(i), 'name') + "," + states(i) -%}
        {% set ns.div = "|" -%}
        {% endif -%}
        {% endfor -%}
        {{ ns.output }}
      ha_count: true

- sensor:
    unique_id: plex_watching
    name: Plex Watching
    icon: mdi:plex
    state: '{{ states("sensor.plex_plex") | int(default=0) }}'
    unit_of_measurement: "watching"
    attributes:
      sessions: |
        { {% set names = {
             'ahuldtgren': 'Andrea',
             'anne.henderson': 'Anne',
             'Atheo37': 'Alex/Marce',
             'brian.7806': 'BrianG',
             'cmilkeman': 'ChrisM',
             'ebfab': 'EricB',
             'erdelyt': 'TomE',
             'heat828': 'Heather',
             'heyitsmikey128': 'Kush',
             'holly__': 'Holly',
             'humber952': 'Chris/Adrian',
             'jhuldtgren': 'Johan',
             'justin7805': 'Justin',
             'Kristy Arthur': 'Kristy',
             'kristyarthur': 'Kristy',
             'l.t.e': 'Dad',
             'Maddie D': 'Maddie',
             'maddied363': 'Maddie',
             'merdely_': 'Mike',
             'Modderno': 'MattM',
             'nacho5631': 'ChrisH',
             'orletsky': 'Martha',
             'plexguest_': 'plexguest',
             'reed530': 'Tracy',
             'SimpliOP': 'DavidG',
             'stuckonu5': 'Madsen',
             }-%}
        {% for attr in states.sensor.plex_plex.attributes -%}
        {% if attr not in ['friendly_name', 'unit_of_measurement'] -%}
        "{{ names[attr | regex_replace(' - .*$','', ignorecase=True)] }}": "{{ state_attr('sensor.plex_plex', attr) }}",
        {% endif -%}
        {% endfor -%} }

