- sensor:
    unique_id: unavailable_entities_list
    name: Unavailable Entities List
    icon: mdi:cloud-question
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: |
        {{ states | selectattr('state', 'in', ['unavailable', 'unknown'])
           | rejectattr('entity_id', 'match', states('sensor.unavailable_entities_filter') | default(''))
           | map(attribute='entity_id') | list | join(', ') }}

- trigger:
    - platform: time_pattern
      seconds: "/10"
    - platform: homeassistant
      event: start
  sensor:
    unique_id: tasmota_devices_list
    name: Tasmota Devices List
    icon: mdi:devices
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      devices: >
        {% set ns = namespace(div = "", output = "") -%}
        {% for i in integration_entities('tasmota') | sort -%}
        {% if i.endswith("_ip") -%}
        {% set ns.output = ns.output + ns.div + device_attr(device_id(i), 'name') + "," + states(i) -%}
        {% set ns.div = "|" -%}
        {% endif -%}
        {% endfor -%}
        {{ ns.output }}

- trigger:
    - platform: time_pattern
      seconds: "/10"
    - platform: homeassistant
      event: start
  sensor:
    name: Wyze Entities
    unique_id: wyze_entities
    icon: mdi:leak
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: |
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^(binary_)?sensor\.wyzesense(_|$)') | map(attribute='entity_id') | list -%}
          {% if state_attr(entity, 'friendly_name') == None -%}
            {% set fname = entity -%}
          {% else -%}
            {% set fname = state_attr(entity, 'friendly_name') -%}
          {% endif -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity, "friendly_name": fname,
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(state_attr(entity, 'timestamp'), 0)) | int(0) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}

- sensor:
    name: OOD Wyze Entities List
    unique_id: ood_wyze_entities_list
    icon: mdi:leak
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      entity_list: >-
        {% set ns = namespace(list = "") -%}
        {% if state_attr('sensor.wyze_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.wyze_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_wyze_seconds') | int(0) -%}
              {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
            {% endif -%}
          {% endfor -%}
        {% else -%}
          {% set ns.list = "" %}
        {% endif -%}
        {{ ns.list | regex_replace(", $", "") }}

- trigger:
    - platform: time_pattern
      seconds: "/10"
    - platform: homeassistant
      event: start
  sensor:
    name: Zigbee Entities
    unique_id: zigbee_entities
    icon: mdi:zigbee
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: >-
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^[\w.]{1,50}_linkquality$') | map(attribute='entity_id') | list -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity,
            "friendly_name": device_attr(device_id(entity), 'name'),
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(states(entity | replace('_linkquality', '_last_seen')), 0) | int(0)) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}

- sensor:
    name: OOD Zigbee Entities List
    unique_id: ood_zigbee_entities_list
    icon: mdi:zigbee
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      entity_list: >
        {% set ns = namespace(list = "") -%}
        {% if state_attr('sensor.zigbee_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.zigbee_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['entity_id'][-17:] == "_bulb_linkquality" -%}
              {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_bulb_seconds') | int(0) -%}
                {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
              {% endif -%}
            {% else -%}
              {% if entity['timediff'] | int(0) > states('input_number.ood_zigbee_seconds') | int(0) -%}
                {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
              {% endif -%}
            {% endif -%}
          {% endfor -%}
        {% else -%}
           {% set ns.list = "" %}
        {% endif -%}
        {{ ns.list | regex_replace(", $", "") }}

- trigger:
    - platform: time_pattern
      seconds: "/10"
    - platform: homeassistant
      event: start
  sensor:
    name: Zwave Entities
    unique_id: zwave_entities
    icon: mdi:z-wave
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: >-
        {% set ns = namespace(entities = []) -%}
        {% for entity in states | selectattr('entity_id', 'match', '^[\w.]{1,50}_last_seen_zwave$') | map(attribute='entity_id') | list -%}
          {% set ns.entities = ns.entities + [{"entity_id": entity,
            "friendly_name": device_attr(device_id(entity), 'name'),
            "timediff": (utcnow().strftime('%s') | int(0) - as_timestamp(states(entity), 0) | int(0)) }] -%}
        {% endfor -%}
        {{ ns.entities | sort(attribute='timediff', reverse=true) }}

- sensor:
    name: OOD Zwave Entities List
    unique_id: ood_zwave_entities_list
    icon: mdi:z-wave
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      timestamp: "{{ now().strftime('%FT%T') }}"
      entity_list: >
        {% set ns = namespace(list = "") -%}
        {% if state_attr('sensor.zwave_entities', 'entity_list') -%}
          {% for entity in state_attr('sensor.zwave_entities', 'entity_list') | default([]) | sort(attribute='timediff', reverse=true) -%}
            {% if entity['timediff'] | int(0) > states('input_number.ood_zwave_seconds') | int(0) -%}
              {% set ns.list = ns.list + entity['friendly_name'] + " (" + entity['timediff'] | string + "), " %}
            {% endif -%}
          {% endfor -%}
        {% else -%}
           {% set ns.list = "" %}
        {% endif -%}
        {{ ns.list | regex_replace(", $", "") }}

- trigger:
    - platform: time_pattern
      seconds: "/10"
    - platform: homeassistant
      event: start
  sensor:
    unique_id: low_battery_list
    name: Low Battery List
    state: "{{ now().strftime('%FT%T') }}"
    attributes:
      entity_list: >-
        {% set ns=namespace(list="") %}
        {% for state in states.sensor -%}
          {% if state.entity_id.endswith('_battery') and state.entity_id != 'sensor.low_battery' and state.state | int(0) < 10 -%}
            {% set ns.list = ns.list + state.name + ' (' + state.state + '%), ' -%}
          {% endif -%}
        {% endfor -%}
        {{ ns.list | regex_replace(", $", "") }}

- binary_sensor:
    unique_id: oven_is_on
    name: Oven is On
    state: "{{ states('sensor.oven_monitor_analog_ctenergy_power') | int(0) > 400 }}"
    delay_off:
        minutes: 3

- binary_sensor:
    unique_id: mailbox_sensor
    name: Mailbox Sensor
    state: '{{ states("binary_sensor.wyzesense_77ca81b4") }}'
    device_class: opening
    attributes:
      device_class: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "device_class") }}'
      timestamp: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "timestamp") }}'
      rssi: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "rssi") }}'
      battery_level: '{{ state_attr("binary_sensor.wyzesense_77ca81b4", "battery_level") }}'
      parent_entity: "binary_sensor.wyzesense_77ca81b4"

# Storage for Bubble Card Modules
- trigger:
    - trigger: event
      event_type: bubble_card_update_modules
  sensor:
    - name: "Bubble Card Modules"
      state: "saved"
      icon: "mdi:puzzle"
      attributes:
        modules: "{{ trigger.event.data.modules }}"
        last_updated: "{{ trigger.event.data.last_updated }}"

